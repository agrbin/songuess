/*jslint indent: 2, plusplus: true*/
'use strict';

var currentEnv = process.env.NODE_ENV || 'developement';

exports.server = {
  port  : 8080,
  httpRoot : 'http://xfer.hr:8080'
};

// server and client have synced clocks. if chunk is to be played less than
// sendAhead seconds in the future, dispatch process for that chunk will begin.
// every setTimeout-ed 0.5 seconds streamer will check above condition.
//
// overlapTime
//  is overlapping between chunks to make seamless playback on
//  client. this constant is copied to ../client/player.js
//
// chunkDuration
//  is chunk duration! it is copied to lib/frames.cpp
//
exports.streamer = {
  sendAhead     : 4,
  checkInterval : 0.5,
  chunkDuration : 2.448,
  overlapTime   : 0.048,
};

// synchronization params.
exports.sync = {
  NumberOfSamples : 10,
  MaxClockDeviation : 10
};

exports.media = {
  'media1' : {
    endpoint  : 'http://localhost:8081',
    desc      : 'grbinov media server'
  },
  'media2' : {
    endpoint  : 'http://localhost:8081',
    desc      : 'grbinov klon media server'
  }
};

exports.auth = {
  clientID    :  'XYZ.apps.googleusercontent.com',
  verifyURL   :  'https://www.googleapis.com/oauth2/v1/tokeninfo',
  profileURL  :  'https://www.googleapis.com/oauth2/v1/userinfo',
  scope       :  'https://www.googleapis.com/auth/userinfo.profile '
                  + 'https://www.googleapis.com/auth/userinfo.email'
};

exports.proxy = {
  // you can bypass proxy with this.
  enable  : true,

  // where will proxy serve chunks
  urlPrefix : '/c/',

  // maximum number of seconds for media server to
  // send a chunk. after this we will issue 504 gateway
  // timeout to clients requesting that chunk.
  maxDelay : 0.5,

  // time that the URL returned from proxify will be available.
  maxAge : 60

};
